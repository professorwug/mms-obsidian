// esbuild.config.mjs
import esbuild from "esbuild";
import fs from "fs";
import path from "path";
import builtins from "builtin-modules";
import process from "process";

const banner = `/* generated by esbuild */`;
const prod   = process.argv[2] === "production";
const arg    = process.argv.find(a => a.startsWith("--outdir="));
const outdir = arg ? arg.split("=")[1] : null;

/* ---------- plugin that copies manifest.json / styles.css ---------- */
const copyStatic = {
  name: "copy-static",
  setup(build) {
    const copy = () => {
      if (!outdir) return;                             // nothing to copy to
      fs.copyFileSync("manifest.json", path.join(outdir, "manifest.json"));
      if (fs.existsSync("styles.css"))
        fs.copyFileSync("styles.css", path.join(outdir, "styles.css"));
      console.log("[copy] manifest.json + styles.css →", outdir);
    };
    build.onEnd(copy);                                 // every rebuild
    copy();                                            // first build
  },
};

/* ---------- build (context API) ---------- */
const ctx = await esbuild.context({
  banner: { js: banner },
  entryPoints: ["main.ts"],
  bundle: true,
  external: [
    "obsidian", "electron",
    "@codemirror/autocomplete", "@codemirror/collab",
    "@codemirror/commands", "@codemirror/language",
    "@codemirror/lint", "@codemirror/search",
    "@codemirror/state", "@codemirror/view",
    "@lezer/common", "@lezer/highlight", "@lezer/lr",
    ...builtins
  ],
  format: "cjs",
  target: "es2018",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  minify: prod,
  ...(outdir ? { outdir, entryNames: "main" } : { outfile: "main.js" }),
  plugins: [copyStatic],
});

if (prod) {
  await ctx.rebuild();          // one-shot production bundle
  process.exit(0);
} else {
  await ctx.watch();            // dev loop – no args!
}
